•	S – Single responsibility principle
•	O – Open/Closed principle
•	L – Liskov’s substitution principle
•	I – Interface segregation principle
•	D – Dependency inversion

• S - This principle can be summarized as: every class that we write should have only one responsibility/purpose.
• O - Open/closed principle states that any software entity (method, class, interface, module etc.) should be open for extension but closed for modification.
• L - we should be able to use sub-class or child class object wherever base class object is expected and this should NOT alter desired properties of the program.
• I - client code should not be forced to implement methods that are not needed by it.
• D - This principle states that code should depend on abstractions & not on concrete implementations.